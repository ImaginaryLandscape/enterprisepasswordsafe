import proguard.gradle.ProGuardTask

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

dependencies {
    def tomcatVersion = '9.0.34'

    compile 'com.sun.mail:javax.mail:1.6.2',
            'com.sun.mail:smtp:1.6.5',
            'commons-codec:commons-codec:1.14',
            'commons-fileupload:commons-fileupload:1.3.3',
            'javax.servlet:javax.servlet-api:4.0.+',
            'javax.servlet.jsp:jsp-api:2.2.+',
            'org.apache.commons:commons-collections4:4.4',
            'org.apache.commons:commons-csv:1.8',
            'org.apache.commons:commons-dbcp2:2.7.0',
            'org.bouncycastle:bctls-jdk15on:1.65'

    testImplementation  'org.junit.jupiter:junit-jupiter-api:5.6.2',
                        'org.mockito:mockito-core:2.28.2'
    testCompile         'net.sourceforge.htmlunit:htmlunit:2.39.1'
    testRuntimeOnly     'org.junit.jupiter:junit-jupiter-engine:5.6.2',
                        'org.apache.derby:derby:10.15.2.0',
                        'org.apache.derby:derbytools:10.15.2.0'


    runtime         'opensymphony:sitemesh:2.4.2',
                    'javax.servlet:jstl:1.2'

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
    }
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging { events "passed", "skipped", "failed" }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

task proguard(type: ProGuardTask, dependsOn: jar) {
    configurations.runtime.each {
        println it
    }

    injars jar.archivePath

    outjars 'passwordsafe.jar'

    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
    libraryjars(configurations.runtime)

    printmapping 'proguard.map'

    dontusemixedcaseclassnames
    dontshrink

    keepclassmembers 'class * extends java.lang.Enum { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    keep 'public class * implements javax.servlet.Filter'
    keep 'public class * implements javax.servlet.Servlet'

    keep 'public class com.enterprisepasswordsafe.engine.configuration.JDBCConfiguration'
    keep 'public class * implements com.enterprisepasswordsafe.engine.dbabstraction.AbstractDAL'
    keep 'public interface com.enterprisepasswordsafe.engine.integration.PasswordChanger'
    keep 'public class com.enterprisepasswordsafe.engine.integration.PasswordChangerProperty'
    keep 'public class * implements com.enterprisepasswordsafe.engine.integration.PasswordChanger { \
        public void rollbackChange(java.sql.Connection, java.util.Map, java.util.Map, java.lang.String); \
        public void changePassword(java.sql.Connection, java.util.Map, java.util.Map, java.lang.String); \
        public java.util.List getProperties(); \
        public void install(java.sql.Connection); \
        public void uninstall(java.sql.Connection); \
    }'
    keepclassmembers 'public class * implements javax.security.auth.spi.LoginModule { \
        void initialize(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler, java.util.Map<java.lang.String,?>, java.util.Map<java.lang.String,?>); \
        boolean login(); \
        boolean commit(); \
        boolean abort(); \
        boolean logout(); \
    }'

    keep 'public interface com.enterprisepasswordsafe.proguard.ExternalInterface'
    keep 'public class * implements com.enterprisepasswordsafe.proguard.ExternalInterface { \
        public *** *; \
        public *** *(...); \
    }'

    keep 'public interface com.enterprisepasswordsafe.proguard.JavaBean'
    keep 'public class * implements com.enterprisepasswordsafe.proguard.JavaBean { \
        void set*(***); \
        void set*(int, ***); \
        boolean is*(); \
        boolean is*(int); \
        *** get*(); \
        *** get*(int); \
    }'

    keepclassmembers 'public class com.enterprisepasswordsafe.engine.database.ConfigurationListenersDAO { \
        void addListener( java.lang.String, com.enterprisepasswordsafe.engine.database.ConfigurationListenersDAO$ConfigurationListener ); \
    }'

}
